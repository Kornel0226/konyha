{
	"info": {
		"_postman_id": "d84293bc-c3be-4b41-9d66-f1c6e2400942",
		"name": "KOnyha",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30815045",
		"_collection_link": "https://vizsga-9515.postman.co/workspace/Vizsga-Workspace~5249a943-a950-4105-bb16-ded22077969a/collection/30815045-d84293bc-c3be-4b41-9d66-f1c6e2400942?action=share&source=collection_link&creator=30815045"
	},
	"item": [
		{
			"name": "register",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the response schema for the user registration endpoint\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('status');\r",
							"    pm.expect(responseData).to.have.property('message');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "username",
							"value": "teszt2postman",
							"type": "text"
						},
						{
							"key": "password",
							"value": "2002Jan26",
							"type": "text"
						},
						{
							"key": "email",
							"value": "teszt2postman@gmail.com",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "localhost:5000/api/v1/users/register",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"v1",
						"users",
						"register"
					]
				},
				"description": "### Register User\n\nThis endpoint allows the client to register a new user.\n\n#### Request Body\n\n- `username` (text): The username of the user.\n- `password` (text): The password for the user account.\n- `email` (text): The email address of the user.\n    \n\n#### Response\n\nThe response is in JSON format and has the following schema:\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"status\": {\n            \"type\": \"number\",\n            \"description\": \"HTTP status code\"\n        },\n        \"message\": {\n            \"type\": \"string\",\n            \"description\": \"Information about the user creation status\"\n        }\n    }\n}\n\n ```"
			},
			"response": [
				{
					"name": "register",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "teszt2postman",
									"type": "text"
								},
								{
									"key": "password",
									"value": "2002Jan26",
									"type": "text"
								},
								{
									"key": "email",
									"value": "teszt2postman@gmail.com",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:5000/api/v1/users/register",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"users",
								"register"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "html",
					"header": [
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Type",
							"value": "text/html; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "25"
						},
						{
							"key": "ETag",
							"value": "W/\"19-TL6irb4Yq98RS/prt1iRZy/pmao\""
						},
						{
							"key": "Date",
							"value": "Tue, 07 May 2024 20:18:43 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5"
						}
					],
					"cookie": [],
					"body": "User created successfully"
				}
			]
		},
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is in an acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "email",
							"value": "r6kory@gmail.com",
							"type": "text"
						},
						{
							"key": "password",
							"value": "2002.Jan.26",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "localhost:5000/api/v1/users/auth",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"v1",
						"users",
						"auth"
					]
				}
			},
			"response": [
				{
					"name": "login",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "r6kory@gmail.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "2002.Jan.26",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "localhost:5000/api/v1/users/auth",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"v1",
								"users",
								"auth"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "198"
						},
						{
							"key": "ETag",
							"value": "W/\"c6-o7EDHTUk2yrXvhreqXb2go34+WM\""
						},
						{
							"key": "Date",
							"value": "Tue, 07 May 2024 20:20:09 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5"
						}
					],
					"cookie": [],
					"body": "{\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJra29yeXhkIiwiaWF0IjoxNzE1MTEzMjA5LCJleHAiOjE3MTUxOTk2MDl9.pkgfn7UhfIa8yZh8BVfOoKAFhYq2oBda7baGcy6SfN4\",\n    \"username\": \"kkoryxd\"\n}"
				}
			]
		},
		{
			"name": "get recipes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.recipes).to.be.an('array');",
							"    ",
							"    responseData.recipes.forEach(function(recipe) {",
							"        pm.expect(recipe).to.include.all.keys('recipe_id', 'title', 'image', 'description', 'preparation_time', 'difficulty_level', 'user_id', 'category_id', 'createdAt', 'updatedAt');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Recipes array is present and contains at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.recipes).to.exist.and.to.be.an('array').that.is.not.empty;",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"var template = `",
							"<style type=\"text/css\">",
							"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}",
							"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}",
							"    .tftable tr {background-color:#ffffff;}",
							"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}",
							"    .tftable tr:hover {background-color:#e0ffff;}",
							"</style>",
							"",
							"<table class=\"tftable\" border=\"1\">",
							"    <tr>",
							"        <th>Recipe ID</th>",
							"        <th>Title</th>",
							"        <th>Image</th>",
							"        <th>Description</th>",
							"        <th>Preparation Time</th>",
							"        <th>Difficulty Level</th>",
							"        <th>User ID</th>",
							"        <th>Category ID</th>",
							"        <th>Created At</th>",
							"        <th>Updated At</th>",
							"    </tr>",
							"    ",
							"    {{#each response.recipes}}",
							"        <tr>",
							"            <td>{{recipe_id}}</td>",
							"            <td>{{title}}</td>",
							"            <td>{{image}}</td>",
							"            <td>{{description}}</td>",
							"            <td>{{preparation_time}}</td>",
							"            <td>{{difficulty_level}}</td>",
							"            <td>{{user_id}}</td>",
							"            <td>{{category_id}}</td>",
							"            <td>{{createdAt}}</td>",
							"            <td>{{updatedAt}}</td>",
							"        </tr>",
							"    {{/each}}",
							"</table>",
							"`;",
							"",
							"function constructVisualizerPayload() {",
							"    return { response: pm.response.json() }",
							"}",
							"",
							"pm.visualizer.set(template, constructVisualizerPayload());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:5000/api/v1/recipes",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"v1",
						"recipes"
					]
				},
				"description": "\nThe endpoint retrieves a list of recipes from the server. The response is a JSON object with a key \"recipes\" containing an array of recipe objects. Each recipe object has the following properties:\n- recipe_id (number): The unique identifier for the recipe.\n- title (string): The title of the recipe.\n- image (string): The URL of the image associated with the recipe.\n- description (string): A brief description of the recipe.\n- preparation_time (number): The time required to prepare the recipe.\n- difficulty_level (string): The difficulty level of the recipe.\n- user_id (number): The unique identifier of the user who created the recipe.\n- category_id (number): The unique identifier of the category to which the recipe belongs.\n- createdAt (string): The timestamp of when the recipe was created.\n- updatedAt (string): The timestamp of when the recipe was last updated.\n"
			},
			"response": []
		},
		{
			"name": "get authenticated user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJLb3J5IiwiaWF0IjoxNzE0NTU2Mzc2LCJleHAiOjE3MTQ2NDI3NzZ9.ZC80FwGSQ4f4HLTiEEoGvvJ9qn-P5jBvK8GMjPK30x4",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:5000/api/v1/recipes",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"v1",
						"recipes"
					]
				}
			},
			"response": []
		},
		{
			"name": "update user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 202\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(202);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 300ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required field 'updated'\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  pm.expect(responseData).to.have.property('updated');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Updated field is a boolean value\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.updated).to.be.a('boolean');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJra29yeXhkIiwiaWF0IjoxNzE1MTEzNzU0LCJleHAiOjE3MTUyMDAxNTR9.dh6H3ZAeCj8YykLwpreS_AjhHRchD-OOTsDOjrP6thY",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"fields\": {\r\n        \"username\": \"funs\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:5000/api/v1/users/user",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"v1",
						"users",
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "create category",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Diétás\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:5000/api/v1/categories/add",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"v1",
						"categories",
						"add"
					]
				}
			},
			"response": []
		},
		{
			"name": "get categories",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is within an acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:5000/api/v1/categories",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"v1",
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "create recipe",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.to.have.status(200));\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Required schema fields for a recipe\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwidXNlcm5hbWUiOiJra29yeXhkIiwiaWF0IjoxNzE1MTEzNzU0LCJleHAiOjE3MTUyMDAxNTR9.dh6H3ZAeCj8YykLwpreS_AjhHRchD-OOTsDOjrP6thY",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"recipe\": {\r\n        \"title\": \"TesztTeszt\",\r\n        \"description\": \"teszt\",\r\n        \"preparation_time\": 10,\r\n        \"difficulty_level\": \"EASY\",\r\n        \"category_id\": 1\r\n    },\r\n    \"ingredients\": [\r\n        {\r\n            \"name\": \"trappista sajt\",\r\n            \"quantity\": 1,\r\n            \"unit\": \"4 szelet\"\r\n        }\r\n    ]\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:5000/api/v1/recipes/add",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"v1",
						"recipes",
						"add"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete recipe",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJLb3J5IiwiaWF0IjoxNzE0NTU2Mzc2LCJleHAiOjE3MTQ2NDI3NzZ9.ZC80FwGSQ4f4HLTiEEoGvvJ9qn-P5jBvK8GMjPK30x4",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "localhost:5000/api/v1/recipes/3",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"v1",
						"recipes",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "update recipe",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJLb3J5IiwiaWF0IjoxNzE0NTU2Mzc2LCJleHAiOjE3MTQ2NDI3NzZ9.ZC80FwGSQ4f4HLTiEEoGvvJ9qn-P5jBvK8GMjPK30x4",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"fields\": {\r\n        \"title\": \"repatorta\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:5000/api/v1/recipes/1",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"v1",
						"recipes",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "get ingredients",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:5000/api/v1/recipes/26/ingredients",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"v1",
						"recipes",
						"26",
						"ingredients"
					]
				}
			},
			"response": []
		},
		{
			"name": "get ingredient",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:5000/api/v1/ingredients/9",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"v1",
						"ingredients",
						"9"
					]
				}
			},
			"response": []
		},
		{
			"name": "create ingredient",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				}
			},
			"response": []
		},
		{
			"name": "delete ingredient",
			"request": {
				"method": "DELETE",
				"header": []
			},
			"response": []
		},
		{
			"name": "get user recipes",
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		}
	]
}